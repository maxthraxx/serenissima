{
  "project_name": "La Serenissima",
  "description": "Codebase map for La Serenissima, a blockchain-powered MMO city builder set in Renaissance Venice. This document helps in navigating and understanding the project's architecture.",
  "last_updated": "2025-05-29",
  "structure": {
    "frontend_app_types": {
      "path": "app/types/",
      "description": "TypeScript type definitions for frontend application components.",
      "important_files": [
        {"path": "app/types/components.ts", "role": "Defines props interfaces for various UI components, e.g., PolygonViewerProps."}
      ]
    },
    "frontend_pages": {
      "path": "app/",
      "description": "Next.js page components that define the application's routes and main views.",
      "important_files": [
        {"path": "app/page.tsx", "role": "Main landing page component for the application."},
        {"path": "app/layout.tsx", "role": "Root layout component that wraps all pages."},
        {"path": "app/globals.css", "role": "Global CSS styles for the entire application."},
        {"path": "app/not-found.tsx", "role": "404 Not Found page component."}
      ],
      "sub_directories": {
        "arrival": {
          "path": "app/arrival/",
          "description": "Components for the new user arrival experience.",
          "important_files": [
            {"path": "app/arrival/page.tsx", "role": "Page component for new user onboarding."}
          ]
        },
        "citizens": {
          "path": "app/citizens/",
          "description": "Components for citizen profiles and management.",
          "important_files": [
            {"path": "app/citizens/page.tsx", "role": "Page component for citizen directory."}
          ]
        },
        "governance": {
          "path": "app/governance/",
          "description": "Components for governance and political features.",
          "important_files": [
            {"path": "app/governance/page.tsx", "role": "Page component for governance interface."}
          ]
        },
        "guilds": {
          "path": "app/guilds/",
          "description": "Components for guild management and information.",
          "important_files": [
            {"path": "app/guilds/page.tsx", "role": "Page component for guild directory and management."}
          ]
        },
        "knowledge": {
          "path": "app/knowledge/",
          "description": "Components for the knowledge repository and tech tree.",
          "important_files": [
            {"path": "app/knowledge/page.tsx", "role": "Page component for knowledge repository."}
          ]
        },
        "loans": {
          "path": "app/loans/",
          "description": "Components for loan management and applications.",
          "important_files": [
            {"path": "app/loans/page.tsx", "role": "Page component for loan management interface."}
          ]
        },
        "map": {
          "path": "app/map/",
          "description": "Components for the main interactive map interface.",
          "important_files": [
            {"path": "app/map/page.tsx", "role": "Page component for the main map view."}
          ]
        },
        "activity_reference": {
          "path": "app/activity-reference/",
          "description": "Components for activity reference documentation.",
          "important_files": [
            {"path": "app/activity-reference/page.tsx", "role": "Page component for activity reference."}
          ]
        },
        "reads_reference": {
          "path": "app/reads-reference/",
          "description": "Components for reading material reference.",
          "important_files": [
            {"path": "app/reads-reference/page.tsx", "role": "Page component for reading material reference."}
          ]
        },
        "utils": {
          "path": "app/utils/",
          "description": "Utility functions specific to the frontend application.",
          "important_files": [
            {"path": "app/utils/coatOfArmsUtils.ts", "role": "Utility functions for coat of arms management."}
          ]
        }
      }
    },
    "api_routes": {
      "path": "app/api/",
      "description": "Next.js API routes that handle server-side requests and data processing.",
      "sub_directories": {
        "actions": {
          "path": "app/api/actions/",
          "description": "API routes for handling user actions.",
          "important_files": [
            {"path": "app/api/actions/construct-building/route.ts", "role": "Handles building construction actions."},
            {"path": "app/api/actions/create-activity/route.ts", "role": "Handles activity creation actions."}
          ]
        },
        "activities": {
          "path": "app/api/activities/",
          "description": "API routes for managing citizen activities.",
          "important_files": [
            {"path": "app/api/activities/route.ts", "role": "Handles general activity operations."},
            {"path": "app/api/activities/try-create/route.ts", "role": "Handles activity creation attempts."}
          ]
        },
        "bridges": {
          "path": "app/api/bridges/",
          "description": "API routes for managing building bridges and orientations.",
          "important_files": [
            {"path": "app/api/bridges/route.ts", "role": "Handles general bridge operations."},
            {"path": "app/api/bridges/[buildingId]/orient/route.ts", "role": "Handles PATCH requests to update building orientation."}
          ]
        },
        "building_data": {
          "path": "app/api/building-data/",
          "description": "API routes for retrieving building data by type.",
          "important_files": [
            {"path": "app/api/building-data/[type]/route.ts", "role": "Handles requests to fetch building data by building type."}
          ]
        },
        "building_resources": {
          "path": "app/api/building-resources/",
          "description": "API routes for managing building resources.",
          "important_files": [
            {"path": "app/api/building-resources/[buildingId]/route.ts", "role": "Handles requests for resources associated with specific buildings."}
          ]
        },
        "citizens": {
          "path": "app/api/citizens/",
          "description": "API routes for citizen data and management.",
          "important_files": [
            {"path": "app/api/citizens/[username]/route.ts", "role": "Handles requests for specific citizen data by username."},
            {"path": "app/api/citizens/[username]/transports/route.ts", "role": "Manages transport data for specific citizens."},
            {"path": "app/api/citizens/top-influence/route.ts", "role": "Retrieves citizens with the highest influence scores."},
            {"path": "app/api/citizens/wallet/[walletAddress]/route.ts", "role": "Handles requests for citizen data by wallet address."}
          ]
        },
        "contracts": {
          "path": "app/api/contracts/",
          "description": "API routes for contract management.",
          "important_files": [
            {"path": "app/api/contracts/[contractId]/activities/route.ts", "role": "Manages activities related to specific contracts."},
            {"path": "app/api/contracts/route.ts", "role": "Handles general contract operations."}
          ]
        },
        "decrees": {
          "path": "app/api/decrees/",
          "description": "API routes for decree management.",
          "important_files": [
            {"path": "app/api/decrees/route.ts", "role": "Handles operations related to governmental decrees."}
          ]
        },
        "fetch_coat_of_arms": {
          "path": "app/api/fetch-coat-of-arms/",
          "description": "API route for retrieving coat of arms images.",
          "important_files": [
            {"path": "app/api/fetch-coat-of-arms/route.ts", "role": "Handles requests to fetch coat of arms images for citizens."}
          ]
        },
        "artists": {
          "path": "app/api/get-artists/",
          "description": "API route for retrieving artist information.",
          "important_files": [
            {"path": "app/api/get-artists/route.ts", "role": "Handles requests to fetch artist data."}
          ]
        },
        "citizens_at_position": {
          "path": "app/api/get-citizens-at-position/",
          "description": "API route for finding citizens at specific map positions.",
          "important_files": [
            {"path": "app/api/get-citizens-at-position/route.ts", "role": "Handles requests to find citizens at specific coordinates."}
          ]
        },
        "public_builders": {
          "path": "app/api/get-public-builders/",
          "description": "API route for retrieving public builder information.",
          "important_files": [
            {"path": "app/api/get-public-builders/route.ts", "role": "Handles requests to fetch public builder data."}
          ]
        },
        "thoughts": {
          "path": "app/api/get-thoughts/",
          "description": "API route for retrieving citizen thoughts.",
          "important_files": [
            {"path": "app/api/get-thoughts/route.ts", "role": "Handles requests to fetch and process citizen thoughts."}
          ]
        },
        "guild_members": {
          "path": "app/api/guild-members/",
          "description": "API routes for guild member management.",
          "important_files": [
            {"path": "app/api/guild-members/[guildId]/route.ts", "role": "Handles requests for members of specific guilds."}
          ]
        },
        "guilds": {
          "path": "app/api/guilds/",
          "description": "API routes for guild management.",
          "important_files": [
            {"path": "app/api/guilds/route.ts", "role": "Handles general guild operations."}
          ]
        },
        "kins": {
          "path": "app/api/kins/",
          "description": "API routes for KinOS file system access.",
          "important_files": [
            {"path": "app/api/kins/[kinId]/content/route.ts", "role": "Handles requests to access KinOS file content for AI citizens."}
          ]
        },
        "transactions": {
          "path": "app/api/transactions/",
          "description": "API routes for transaction management.",
          "important_files": [
            {"path": "app/api/transaction/land/[landId]/route.ts", "role": "Handles land transaction operations."},
            {"path": "app/api/transactions/land-offers/[landId]/route.ts", "role": "Manages offers for land parcels."}
          ]
        },
        "water_points": {
          "path": "app/api/water-points/",
          "description": "API routes for water point management.",
          "important_files": [
            {"path": "app/api/water-points/route.ts", "role": "Handles operations related to water points on the map."}
          ]
        },
        "weather": {
          "path": "app/api/weather/",
          "description": "API routes for weather information.",
          "important_files": [
            {"path": "app/api/weather/route.ts", "role": "Handles requests for weather data."}
          ]
        },
        "withdraw_compute": {
          "path": "app/api/withdraw-compute/",
          "description": "API routes for withdrawing compute tokens.",
          "important_files": [
            {"path": "app/api/withdraw-compute/route.ts", "role": "Handles compute token withdrawal requests."}
          ]
        },
        "calculate_mood": {
          "path": "app/api/calculate-mood/",
          "description": "API routes for calculating citizen mood.",
          "important_files": [
            {"path": "app/api/calculate-mood/route.ts", "role": "Handles citizen mood calculation."}
          ]
        },
        "get_ledger": {
          "path": "app/api/get-ledger/",
          "description": "API routes for retrieving ledger information.",
          "important_files": [
            {"path": "app/api/get-ledger/route.ts", "role": "Handles requests for ledger data."}
          ]
        },
        "try_read": {
          "path": "app/api/try-read/",
          "description": "API routes for reading attempts.",
          "important_files": [
            {"path": "app/api/try-read/route.ts", "role": "Handles reading attempt requests."}
          ]
        },
        "stratagems": {
          "path": "app/api/stratagems/",
          "description": "API routes for stratagem management.",
          "important_files": [
            {"path": "app/api/stratagems/route.ts", "role": "Handles general stratagem operations."},
            {"path": "app/api/stratagems/try-create/route.ts", "role": "Handles stratagem creation attempts."}
          ]
        }
      }
    },
    "frontend_components": {
      "path": "components/",
      "description": "React components for the user interface, organized by functionality.",
      "sub_directories": {
        "Articles": {
          "path": "components/Articles/",
          "description": "React components for displaying help and lore articles in the Knowledge Repository.",
          "important_files": [
            {"path": "components/Articles/index.ts", "role": "Entry point exporting all article components."},
            {"path": "components/Articles/BeginnersGuideArticle.tsx", "role": "Guide for new players."},
            {"path": "components/Articles/EconomicSystemArticle.tsx", "role": "Explains the game's economic system."},
            {"path": "components/Articles/SocialClassArticle.tsx", "role": "Details the social class system."},
            {"path": "components/Articles/LandOwnerGuideArticle.tsx", "role": "Guide for landowners."},
            {"path": "components/Articles/BuildingOwnersGuideArticle.tsx", "role": "Guide for building owners."},
            {"path": "components/Articles/BusinessOwnersGuideArticle.tsx", "role": "Guide for business owners."},
            {"path": "components/Articles/VenetianGuildsArticle.tsx", "role": "Information on Venetian guilds."},
            {"path": "components/Articles/GuildLeadershipArticle.tsx", "role": "Information on guild leadership and coordination."},
            {"path": "components/Articles/DecreesGovernanceArticle.tsx", "role": "Explains the decree and governance system."},
            {"path": "components/Articles/StrategiesArticle.tsx", "role": "Presents advanced gameplay strategies."},
            {"path": "components/Articles/HistoricalAccuracyArticle.tsx", "role": "Discusses the game's historical accuracy."},
            {"path": "components/Articles/UnifiedCitizenModelArticle.tsx", "role": "Explains the unified model for AI and human citizens."},
            {"path": "components/Articles/CitizenActivitiesAndNeedsArticle.tsx", "role": "Details citizen activities and needs."}
          ]
        },
        "ErrorBoundary": {
          "path": "components/ErrorBoundary/",
          "description": "Error handling components for React.",
          "important_files": [
            {"path": "components/ErrorBoundary/ErrorBoundary.tsx", "role": "Defines a React error boundary component."}
          ]
        },
        "Knowledge": {
          "path": "components/Knowledge/",
          "description": "Components related to the in-game knowledge base and tech tree.",
          "important_files": [
            {"path": "components/Knowledge/ResourceDetails.tsx", "role": "Displays detailed information about resources."},
            {"path": "components/Knowledge/TechTree.tsx", "role": "Component for visualizing the technology tree."}
          ]
        },
        "Loans": {
          "path": "components/Loans/",
          "description": "UI components for managing loans.",
          "important_files": [
            {"path": "components/Loans/LoanPanel.tsx", "role": "Panel for loan-related actions."}
          ]
        },
        "PolygonViewer": {
          "path": "components/PolygonViewer/",
          "description": "Components related to the isometric map view and interactions.",
          "important_files": [
            {"path": "components/PolygonViewer/BuildingCreationPanel.tsx", "role": "Panel for creating new buildings."},
            {"path": "components/PolygonViewer/BuildingDetails/BidPlacementPanel.tsx", "role": "Panel for placing bids on buildings."},
            {"path": "components/PolygonViewer/BuildingDetails/BuildingFinancials.tsx", "role": "Displays financial details of a building."},
            {"path": "components/PolygonViewer/BuildingDetails/BuildingLocation.tsx", "role": "Displays location information for a building."},
            {"path": "components/PolygonViewer/BuildingDetails/BuildingMaintenance.tsx", "role": "Panel for building maintenance."},
            {"path": "components/PolygonViewer/BuildingDetails/BuildingOccupant.tsx", "role": "Displays building occupant information and allows interaction."},
            {"path": "components/PolygonViewer/BuildingDetails/BuildingOwner.tsx", "role": "Displays building owner information and allows interaction."},
            {"path": "components/PolygonViewer/BuildingDetails/BuildingRelevanciesList.tsx", "role": "Lists relevancies associated with a building for a citizen."},
            {"path": "components/PolygonViewer/BuildingDetails/ConstructionServicePanel.tsx", "role": "Panel for construction services related to buildings."},
            {"path": "components/PolygonViewer/BuildingDetails/ContractNegotiationPanel.tsx", "role": "Panel for negotiating contracts related to buildings or resources."},
            {"path": "components/PolygonViewer/BuildingDetails/ResourceItem.tsx", "role": "Component to display a single resource item within building details."},
            {"path": "components/PolygonViewer/BuildingMarkers.tsx", "role": "Renders building markers on the isometric map."},
            {"path": "components/PolygonViewer/ResourceMarkers.tsx", "role": "Renders resource markers on the isometric map."},
            {"path": "components/PolygonViewer/ViewportController.tsx", "role": "Manages the viewport (pan, zoom) for the isometric map."},
            {"path": "components/PolygonViewer/types.ts", "role": "TypeScript type definitions specific to PolygonViewer components."}
          ]
        },
        "UI": {
          "path": "components/UI/",
          "description": "General-purpose UI components used throughout the application.",
          "important_files": [
            {"path": "components/UI/ActionButton.tsx", "role": "Reusable action button component."},
            {"path": "components/UI/AnimatedDucats.tsx", "role": "Component for displaying animated Ducat values."},
            {"path": "components/UI/BuildingModelViewer.tsx", "role": "Component for viewing 3D building models."},
            {"path": "components/UI/CitizenRegistry.tsx", "role": "Displays a registry of citizens, including their relevancies and opportunities."},
            {"path": "components/UI/CitizenRelevanciesList.tsx", "role": "Lists relevancies specifically for a citizen's profile."},
            {"path": "components/UI/ComputeInvestModal.tsx", "role": "Modal for investing $COMPUTE tokens."},
            {"path": "components/UI/DailyUpdatePanel.tsx", "role": "Panel for displaying daily game updates or news."},
            {"path": "components/UI/GuildsPanel.tsx", "role": "Panel for guild information and management."},
            {"path": "components/UI/IconButton.tsx", "role": "Reusable icon button component."},
            {"path": "components/UI/InfoIcon.tsx", "role": "Icon with a tooltip for displaying informational messages."},
            {"path": "components/UI/MyOffersView.tsx", "role": "View for displaying the current user's active offers."},
            {"path": "components/UI/Portal.tsx", "role": "React Portal component for rendering children into a different DOM subtree (e.g., for modals)."},
            {"path": "components/UI/ProblemDetailsPanel.tsx", "role": "Panel for displaying details of a specific game problem."},
            {"path": "components/UI/ProfileEditor.tsx", "role": "Component for editing user or citizen profiles."},
            {"path": "components/UI/RelationshipGraph.tsx", "role": "Component for visualizing relationships between citizens."},
            {"path": "components/UI/ResourceDropdown.tsx", "role": "Dropdown component for selecting resources."},
            {"path": "components/UI/TransferComputeMenu.tsx", "role": "Menu for transferring $COMPUTE tokens."},
            {"path": "components/UI/WalletButton.tsx", "role": "Button related to wallet actions (connect, disconnect, view status)."},
            {"path": "components/UI/WalletStatus.tsx", "role": "Displays the current status of the connected wallet."},
            {"path": "components/UI/WithdrawComputeMenu.tsx", "role": "Menu for withdrawing $COMPUTE tokens."}
          ]
        },
        "types": {
            "path": "components/types/",
            "description": "Shared TypeScript type definitions specifically for components.",
            "important_files": [
                {"path": "components/types/phantom.d.ts", "role": "Type definitions for the Phantom wallet provider interface."}
            ]
        }
      }
    },
    "backend": {
      "path": "backend/",
      "description": "Server-side logic, game engine scripts, AI behaviors, and API services.",
      "sub_directories": {
        "docs": {
          "path": "backend/docs/",
          "description": "Markdown documentation for backend systems, game mechanics, and AI.",
          "important_files": [
            {"path": "backend/docs/activities.md", "role": "Explains the citizen activity system, types, and processing.", "importance": "IMPORTANT"},
            {"path": "backend/docs/airtable_schema.md", "role": "Describes the Airtable database schema for all tables.", "importance": "IMPORTANT"},
            {"path": "backend/docs/ais.md", "role": "Details the AI system, its behaviors, and KinOS Engine integration."},
            {"path": "backend/docs/contracts.md", "role": "Explains the contract system, types, and lifecycle."},
            {"path": "backend/docs/decrees.md", "role": "Documents the decree system, active decrees, and their implementation."},
            {"path": "backend/docs/engine.md", "role": "Describes automated daily game engine processes and their schedules."},
            {"path": "backend/docs/problems.md", "role": "Documents the problem detection system, types of problems, and management."},
            {"path": "backend/docs/relevancy-system.md", "role": "Explains the relevancy calculation system for AI and player guidance."},
            {"path": "backend/docs/relationships.md", "role": "Documents the citizen relationship system, including StrengthScore and TrustScore calculation."},
            {"path": "backend/docs/stratagems.md", "role": "Documents the stratagem system, types of stratagems, and their effects on the game world.", "importance": "IMPORTANT"}
          ]
        },
        "engine": {
          "path": "backend/engine/",
          "description": "Core game engine scripts that run daily automated processes.",
          "sub_directories": {
            "activity_creators": {
              "path": "backend/engine/activity_creators/",
              "description": "Scripts that create various types of activities for citizens.",
              "important_files": [
                {"path": "backend/engine/activity_creators/__init__.py", "role": "Initializes the activity creators module and provides common functionality."},
                {"path": "backend/engine/activity_creators/eat_activity_creator.py", "role": "Creates eating activities for citizens."},
                {"path": "backend/engine/activity_creators/goto_work_activity_creator.py", "role": "Creates activities for citizens to go to their workplace."},
                {"path": "backend/engine/activity_creators/production_activity_creator.py", "role": "Creates production activities for businesses."},
                {"path": "backend/engine/activity_creators/send_message_creator.py", "role": "Creates message sending activities between citizens."}
              ]
            },
            "activity_processors": {
              "path": "backend/engine/activity_processors/",
              "description": "Scripts that process and execute various types of activities.",
              "important_files": [
                {"path": "backend/engine/activity_processors/__init__.py", "role": "Initializes the activity processors module and provides common functionality."},
                {"path": "backend/engine/activity_processors/eat_processor.py", "role": "Processes eating activities for citizens."},
                {"path": "backend/engine/activity_processors/production_processor.py", "role": "Processes production activities for businesses."},
                {"path": "backend/engine/activity_processors/send_message_processor.py", "role": "Processes message sending between citizens."}
              ]
            },
            "stratagem_creators": {
              "path": "backend/engine/stratagem_creators/",
              "description": "Scripts that create various types of stratagems for citizens.",
              "important_files": [
                {"path": "backend/engine/stratagem_creators/__init__.py", "role": "Initializes the stratagem creators module and provides common functionality."},
                {"path": "backend/engine/stratagem_creators/marketplace_gossip_stratagem_creator.py", "role": "Creates marketplace gossip stratagems."},
                {"path": "backend/engine/stratagem_creators/undercut_stratagem_creator.py", "role": "Creates undercutting price stratagems."}
              ]
            },
            "stratagem_processors": {
              "path": "backend/engine/stratagem_processors/",
              "description": "Scripts that process and execute various types of stratagems.",
              "important_files": [
                {"path": "backend/engine/stratagem_processors/__init__.py", "role": "Initializes the stratagem processors module and provides common functionality."},
                {"path": "backend/engine/stratagem_processors/marketplace_gossip_stratagem_processor.py", "role": "Processes marketplace gossip stratagems."},
                {"path": "backend/engine/stratagem_processors/reputation_assault_stratagem_processor.py", "role": "Processes reputation assault stratagems."}
              ]
            },
            "logic": {
              "path": "backend/engine/logic/",
              "description": "Core business logic for different citizen types and activities.",
              "important_files": [
                {"path": "backend/engine/logic/citizen_general_activities.py", "role": "Contains logic for general citizen activities."},
                {"path": "backend/engine/logic/construction_logic.py", "role": "Contains logic for building construction."},
                {"path": "backend/engine/logic/forestieri_activities.py", "role": "Contains logic for foreign merchant activities."}
              ]
            },
            "utils": {
              "path": "backend/engine/utils/",
              "description": "Utility functions used by the engine scripts.",
              "important_files": [
                {"path": "backend/engine/utils/activity_helpers.py", "role": "Helper functions for activity creation and processing."},
                {"path": "backend/engine/utils/conversation_helper.py", "role": "Helper functions for citizen conversations."},
                {"path": "backend/engine/utils/relationship_helpers.py", "role": "Helper functions for managing citizen relationships."},
                {"path": "backend/engine/utils/thinking_helper.py", "role": "Helper functions for AI citizen thinking processes."}
              ]
            }
          },
          "important_files": [
            {"path": "backend/engine/pay_building_maintenance.py", "role": "Collects daily building maintenance costs from owners."},
            {"path": "backend/engine/treasuryRedistribution.py", "role": "Redistributes a portion of the Republic's treasury to citizens based on social class."},
            {"path": "backend/engine/distributeLeases.py", "role": "Handles daily lease payment distribution from building owners to landowners and applies Vigesima Variabilis tax."},
            {"path": "backend/engine/immigration.py", "role": "Manages new AI citizen immigration based on vacant housing availability."},
            {"path": "backend/engine/citizensgetjobs.py", "role": "Assigns jobs to unemployed citizens (excluding Nobili)."},
            {"path": "backend/engine/househomelesscitizens.py", "role": "Assigns housing to homeless citizens based on social class and rent."},
            {"path": "backend/engine/citizenhousingmobility.py", "role": "Simulates citizens looking for cheaper housing options."},
            {"path": "backend/engine/updateSocialClass.py", "role": "Updates citizen social classes based on economic achievements and influence."},
            {"path": "backend/engine/citizenworkmobility.py", "role": "Simulates citizens looking for better-paying job opportunities."},
            {"path": "backend/engine/dailyloanpayments.py", "role": "Processes daily loan payments between borrowers and lenders."},
            {"path": "backend/engine/dailywages.py", "role": "Processes daily wage payments from businesses to their employees."},
            {"path": "backend/engine/dailyrentpayments.py", "role": "Processes daily rent payments for housing and business premises."},
            {"path": "backend/engine/calculateIncomeAndTurnover.py", "role": "Calculates and updates daily, weekly, and monthly income/turnover for all citizens."},
            {"path": "backend/engine/processActivities.py", "role": "Processes all pending activities in the system."},
            {"path": "backend/engine/processStratagems.py", "role": "Processes all pending stratagems in the system."},
            {"path": "backend/engine/createActivities.py", "role": "Core script that assigns activities to citizens based on their needs and status."},
            {"path": "backend/engine/paystoragecontracts.py", "role": "Processes daily payments for active storage contracts."},
            {"path": "backend/engine/dailyUpdate.py", "role": "Main orchestration script for the daily game update process."}
          ]
        },
        "ais": {
          "path": "backend/ais/",
          "description": "Scripts defining AI citizen behaviors and decision-making, often integrating with KinOS Engine.",
          "important_files": [
            {"path": "backend/ais/bidonlands.py", "role": "Manages AI bidding on land parcels based on income potential."},
            {"path": "backend/ais/purchaselands.py", "role": "Manages AI purchasing of available land parcels."},
            {"path": "backend/ais/buildbuildings.py", "role": "Manages AI construction of buildings on their owned land."},
            {"path": "backend/ais/adjustleases.py", "role": "KinOS-driven AI adjustment of lease prices for buildings on their land."},
            {"path": "backend/ais/automated_adjustleases.py", "role": "Rule-based AI adjustment of lease prices for buildings on their land."},
            {"path": "backend/ais/adjustrents.py", "role": "KinOS-driven AI adjustment of rent prices for buildings they own."},
            {"path": "backend/ais/automated_adjustrents.py", "role": "Rule-based AI adjustment of rent prices for buildings they own."},
            {"path": "backend/ais/adjustwages.py", "role": "KinOS-driven AI adjustment of wages for businesses they run."},
            {"path": "backend/ais/automated_adjustwages.py", "role": "Rule-based AI adjustment of wages for businesses they run."},
            {"path": "backend/ais/adjustimports.py", "role": "KinOS-driven AI management of resource import contracts for their businesses."},
            {"path": "backend/ais/automated_adjustimports.py", "role": "Rule-based AI management of resource import contracts."},
            {"path": "backend/ais/managepublicsalesandprices.py", "role": "KinOS-driven AI management of public sell contracts and pricing strategies."},
            {"path": "backend/ais/automated_managepublicsalesandprices.py", "role": "Rule-based AI creation/update of public sell contracts and pricing."},
            {"path": "backend/ais/automated_adjustpublicstoragecontracts.py", "role": "Rule-based AI management of public storage contract offerings."},
            {"path": "backend/ais/automated_adjuststoragequeriescontracts.py", "role": "Rule-based AI creation of storage query contracts when their businesses need external storage."},
            {"path": "backend/ais/answertomessages.py", "role": "KinOS-driven AI generation of responses to player messages."},
            {"path": "backend/ais/processnotifications.py", "role": "KinOS-driven AI processing of game notifications to update their world model."},
            {"path": "backend/ais/generatethoughts.py", "role": "KinOS-driven AI generation of strategic thoughts, visible to players."},
            {"path": "backend/ais/delegateBusinesses.py", "role": "Redistributes businesses if an AI citizen runs too many, to maintain balance."},
            {"path": "backend/ais/messagesInitiatives.py", "role": "Allows AI citizens to proactively initiate conversations with other citizens."},
            {"path": "backend/ais/autoResolveProblems.py", "role": "AI-driven problem resolution system."},
            {"path": "backend/ais/autonomouslyRun.py", "role": "Core script for autonomous AI citizen decision-making."},
            {"path": "backend/ais/thinkingLoop.py", "role": "Background process that manages AI citizen thinking cycles."}
          ]
        },
        "relevancies": {
            "path": "backend/relevancies/",
            "description": "Scripts for calculating and managing relevancy scores for citizens.",
            "important_files": [
                {"path": "backend/relevancies/calculateRelevancies.py", "role": "Orchestrates the calculation of all types of relevancies (proximity, domination, etc.)."},
                {"path": "backend/relevancies/calculateSpecificRelevancy.py", "role": "Handles the calculation of specific relevancy types based on parameters."},
                {"path": "backend/relevancies/calculateHousingRelevancies.py", "role": "Calculates housing-specific relevancies for citizens."},
                {"path": "backend/relevancies/calculateJobMarketRelevancies.py", "role": "Calculates job market relevancies for citizens."},
                {"path": "backend/relevancies/gatherInformation.py", "role": "Gathers information needed for relevancy calculations."}
            ]
        },
        "relationships": {
            "path": "backend/relationships/",
            "description": "Scripts for managing and updating inter-citizen relationships.",
            "important_files": [
                {"path": "backend/relationships/updateRelationshipStrengthScores.py", "role": "Updates relationship strength scores between citizens."},
                {"path": "backend/relationships/processEncounters.py", "role": "Processes citizen encounters and their effects on relationships."}
            ]
        },
        "resources": {
            "path": "backend/resources/",
            "description": "Scripts for managing in-game resources and their lifecycle.",
            "important_files": [
                {"path": "backend/resources/processdecay.py", "role": "Processes the decay of perishable resources over time."},
                {"path": "backend/resources/processHomeConsumption.py", "role": "Processes the consumption of resources in citizen homes."}
            ]
        },
        "problems": {
            "path": "backend/problems/",
            "description": "Scripts for detecting and managing in-game problems affecting citizens or assets.",
            "important_files": [
                {"path": "backend/problems/detectProblems.py", "role": "Orchestrates the detection of all defined problem types (e.g., homelessness, vacant buildings)."},
                {"path": "backend/problems/detectSpecificProblems.py", "role": "Triggers the detection of specific problem types, potentially for a given user."}
            ]
        },
        "scripts": {
            "path": "backend/scripts/",
            "description": "Utility scripts for various administrative and maintenance tasks.",
            "important_files": [
                {"path": "backend/scripts/buildFast.py", "role": "Script for rapid building construction (likely for testing)."},
                {"path": "backend/scripts/generateCitizen.py", "role": "Generates new AI citizens with appropriate attributes."},
                {"path": "backend/scripts/generate_building_images.py", "role": "Generates images for buildings using AI."},
                {"path": "backend/scripts/updatecitizenDescriptionAndImage.py", "role": "Updates citizen descriptions and images."},
                {"path": "backend/scripts/artistwork.py", "role": "Manages artist work and art creation in the game."},
                {"path": "backend/scripts/signoriaDiscussion.py", "role": "Manages discussions in the Signoria (governing council)."},
                {"path": "backend/scripts/processAllActivitiesNow.py", "role": "Immediately processes all pending activities."}
            ]
        },
        "trainings": {
            "path": "backend/trainings/",
            "description": "Scripts and data for training AI models used in the game.",
            "important_files": [
                {"path": "backend/trainings/finetuneModel.py", "role": "Fine-tunes AI models for specific game tasks."},
                {"path": "backend/trainings/prepareDataset.py", "role": "Prepares datasets for AI model training."},
                {"path": "backend/trainings/install_llama_cpp.py", "role": "Installs the llama.cpp library for AI model inference."},
                {"path": "backend/trainings/diagnose_model.py", "role": "Diagnoses issues with AI models."}
            ]
        },
        "app": {
            "path": "backend/app/",
            "description": "Core application files for the backend server.",
            "important_files": [
                {"path": "backend/app/main.py", "role": "Main entry point for the backend application."},
                {"path": "backend/app/scheduler.py", "role": "Schedules and manages background tasks."},
                {"path": "backend/app/citizen_utils.py", "role": "Utility functions for citizen management."}
            ]
        },
        "startup_scripts": {
            "path": "backend/",
            "description": "Root backend directory containing main startup scripts.",
            "important_files": [
                {"path": "backend/startup.sh", "role": "Shell script used to initialize backend services and schedule cron jobs."},
                {"path": "backend/setup_cron.sh", "role": "Sets up cron jobs for recurring tasks."},
                {"path": "backend/run.py", "role": "Main Python entry point for running the backend."},
                {"path": "backend/.env", "role": "Environment configuration file."},
                {"path": "backend/requirements.txt", "role": "Python dependencies for the backend."}
            ]
        }
      }
    },
    "libraries_and_utilities": {
      "path": "lib/",
      "description": "Shared libraries, services, and utility functions used across the application.",
      "sub_directories": {
        "models": {
          "path": "lib/models/",
          "description": "TypeScript model definitions for core game entities.",
          "important_files": [
            {"path": "lib/models/BuildingTypes.ts", "role": "Defines building position types and related interfaces."}
          ]
        },
        "services": {
          "path": "lib/services/",
          "description": "Core services providing specific functionalities.",
          "important_files": [
            {"path": "lib/services/CitizenRenderService.ts", "role": "Service likely related to preparing citizen data for rendering or display."},
            {"path": "lib/services/ContractService.ts", "role": "Manages contract data, including caching and providing lookup methods."},
            {"path": "lib/services/HoverStateService.ts", "role": "Manages hover state information for UI interactions, possibly on the map."},
            {"path": "lib/services/IncomeDataService.ts", "role": "Manages income data for citizens with min/max tracking."},
            {"path": "lib/services/LoanService.ts", "role": "Manages loan data, statuses, and related operations."},
            {"path": "lib/services/PolygonService.ts", "role": "Manages polygon data for land parcels and related information."},
            {"path": "lib/services/ResourceService.ts", "role": "Manages resource data, categories, player/global inventories, and caching."},
            {"path": "lib/services/ProblemService.ts", "role": "Contains logic for detecting specific problem types, used by backend problem detection scripts."},
            {"path": "lib/services/RelevancyService.ts", "role": "Contains logic for calculating various relevancy scores, used by backend relevancy scripts."}
          ]
        },
        "store": {
          "path": "lib/store/",
          "description": "State management stores for the frontend application (e.g., Zustand or Redux).",
          "important_files": [
            {"path": "lib/store/contractStore.ts", "role": "Manages frontend state related to contracts and transactions."},
            {"path": "lib/store/marketStore.ts", "role": "Manages frontend state related to market data and transactions."}
          ]
        },
        "utils": {
          "path": "lib/utils/",
          "description": "General utility functions.",
          "important_files": [
            {"path": "lib/utils/eventBus.ts", "role": "Global event bus for decoupled communication between components or modules."},
            {"path": "lib/utils/resourceUtils.ts", "role": "Utility functions related to resource management or calculations."},
            {"path": "lib/utils/problemUtils.ts", "role": "Utility functions for handling problem records, such as saving them to the database."}
          ]
        }
      }
    },
    "ai_system_core_files": {
        "path": "./", 
        "description": "Root directory files defining the core operational parameters and persona for AI citizens using the KinOS.",
        "important_files": [
            {"path": "kinos.txt", "role": "Defines the KinOS implementation for AI Citizens, including memory types (Citizen Profile, Venice World Knowledge, Relationships, Codebase Knowledge), adaptation strategies, and operational mandate regarding codebase access and output structure."},
            {"path": "system.txt", "role": "System-level instructions for AI players, emphasizing KinOS integration for memory management, adherence to persona, and guidelines for using codebase knowledge ethically."},
            {"path": "persona.txt", "role": "Template for AI player personas, outlining character framework (background, personality, strategic orientation), initial goals/motivations, communication style, and how persona integrates with KinOS."}
        ]
    },
    "ai_dynamic_data_storage": {
        "path": "AI-memories/",
        "description": "Directory where AI citizens persist their structured memories as defined in kinos.txt (e.g., Citizen Profile, Venice World Knowledge, Relationship & Interaction Memory, Codebase & System Knowledge Memory).",
        "role": "Persistent storage for AI's processed information, learned knowledge, and evolving understanding of the game world and themselves."
    },
    "ai_strategic_planning_storage": {
        "path": "AI-strategies/",
        "description": "Directory where AI citizens house their formulated strategic plans, decision trees, tactical responses to events, and long-term objectives, derived from their memories and persona.",
        "role": "Storage for AI's actionable plans, contingent strategies, and overarching goals guiding their behavior in La Serenissima."
    }
  }
}
