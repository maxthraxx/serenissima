import { NextRequest, NextResponse } from 'next/server';
import { relevancyService } from '@/lib/services/RelevancyService';
import { saveRelevancies } from '@/lib/utils/relevancyUtils';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { Citizen } = body; 
    const username = Citizen; 

    if (!username) {
      return NextResponse.json(
        { error: 'Username (Citizen) is required' },
        { status: 400 }
      );
    }

    // Fetch all citizens and lands for context if saveRelevancies needs them
    const citizensResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/citizens`);
    const citizensData = await citizensResponse.json();
    const allCitizens = citizensData.citizens || [];
    
    const allLands = await relevancyService.fetchLands(); 

    // Calculate building-occupant relationship relevancies. Returns RelevancyScore[] for the given username.
    const generatedRelevancies = await relevancyService.calculateBuildingOccupantRelationshipRelevancy(username);
    console.log(`[API building-occupant POST for user ${username}] Total relevancy objects generated by service: ${generatedRelevancies.length}`);

    // Since the service now only returns relevancies for the specified 'username',
    // we can directly prepare them for saving.
    const relevanciesToSave: Record<string, any> = {};
    generatedRelevancies.forEach(relevancy => {
      // Create a unique key for the relevancy: buildingId_type
      const relevancyKey = `${relevancy.asset}_${relevancy.type}`;
      relevanciesToSave[relevancyKey] = relevancy;
    });

    let savedCount = 0;
    let saveSucceeded = true;

    if (Object.keys(relevanciesToSave).length > 0) {
      console.log(`[API building-occupant POST] Saving ${Object.keys(relevanciesToSave).length} relevancies for citizen: ${username}`);
      try {
        savedCount = await saveRelevancies(username, relevanciesToSave, allLands, allCitizens);
        console.log(`[API building-occupant POST] Successfully saved ${savedCount} relevancies for ${username}`);
      } catch (error) {
        console.error(`[API building-occupant POST] Error saving relevancies for ${username}:`, error);
        saveSucceeded = false;
      }
    } else {
      console.log(`[API building-occupant POST] No relevancies to save for ${username}.`);
      // saveSucceeded remains true as there was no failure, just nothing to do.
    }
    
    // For the API response
    const simpleScoresForRequestingUser: Record<string, number> = {};
    const detailedRelevancyForRequestingUser: Record<string, any> = {};

    generatedRelevancies.forEach(relevancy => {
      const key = `${relevancy.asset}_${relevancy.type}`;
      simpleScoresForRequestingUser[key] = relevancy.score;
      detailedRelevancyForRequestingUser[key] = relevancy;
    });

    return NextResponse.json({
      success: saveSucceeded,
      username: username,
      relevancyScores: simpleScoresForRequestingUser,
      detailedRelevancy: detailedRelevancyForRequestingUser,
      saved: saveSucceeded, // Reflects if saving attempt was made and successful
      relevanciesSavedCount: savedCount 
    });
    
  } catch (error) {
    console.error('Error calculating and saving building occupant relationship relevancies:', error);
    return NextResponse.json(
      { error: 'Failed to calculate building occupant relationship relevancies', details: error.message },
      { status: 500 }
    );
  }
}
